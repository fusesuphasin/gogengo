package createstruct

import (
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"strings"

	gojson "github.com/ChimeraCoder/gojson"
	"github.com/itchyny/gojq"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type User struct {
	Name string
	Age  int
}

func ParseJson(input io.Reader) (interface{}, error) {
	var result interface{}
	if err := json.NewDecoder(input).Decode(&result); err != nil {
		return nil, err
	}
	return result, nil
}

func CreateStruct(body *[]byte) {
	/* f, err := os.Open("./courie.json") // file.json has the json content
	if err != nil {
		log.Fatal(err)
	}
	body, err := ioutil.ReadAll(f)
	if err != nil {
		log.Fatal(err)
	}
 */
	//dataString := string(body)

	data := gjson.Parse(string(*body)).Value()

	query, err := gojq.Parse(`paths | join(".")`)
	if err != nil {
		log.Fatalln(err)
	}

	//maps := []string{}
	iter := query.Run(data)
	for {
		v, ok := iter.Next()
		if !ok {
			break
		}
		if err, ok := v.(error); ok {
			log.Fatalln(err)
		}
		str := fmt.Sprintf("%v", v)
		strSp := strings.Split(str, ".")
		//count:=0
		for _, value := range strSp {
			fmt.Println(str, "____")
			if value == "response" {
				//fmt.Println(value)
				if strSp[len(strSp)-1] == "raw" {
					getValue := gjson.GetBytes((*body), str)
					// sjson.Set(dataString, str, getValue)
					// //a := getValue.Str
					// fmt.Println(getValue.Type, "*", getValue.Str)

					value, _ := sjson.Set(string(*body), str, getValue.Str)
					var msg map[string]interface{}
					err := json.Unmarshal((*body), &msg)
					_ = err
					_ = value
					v := gjson.ParseBytes(*body).Value()
					_ = v
					//fmt.Println(getValue)
					jsonS := `"{
						{\r\n    \"async\": false,\r\n    \"suphasin\": [\r\n        {\r\n            \"id\": \"4390bc1c-d459-4c94-a9ae-0d74b5245b73\"\r\n        }\r\n    ],\r\n    \"shipment\": {\r\n        \"parcels\": [\r\n            {\r\n                \"box_type\": \"custom\",\r\n                \"weight\": {\r\n                    \"value\": 1.2,\r\n                    \"unit\": \"kg\"\r\n                },\r\n                \"dimension\": {\r\n                    \"width\": 10,\r\n                    \"height\": 10,\r\n                    \"depth\": 10,\r\n                    \"unit\": \"cm\"\r\n                },\r\n                \"items\": [\r\n                    {\r\n                        \"description\": \"Food Bar\",\r\n                        \"item_id\": \"13131313\",\r\n                        \"quantity\": 2,\r\n                        \"price\": {\r\n                            \"amount\": 50,\r\n                            \"currency\": \"USD\"\r\n                        },\r\n                        \"weight\": {\r\n                            \"value\": 0.6,\r\n                            \"unit\": \"kg\"\r\n                        },\r\n                        \"sku\": \"Epic_Food_Bar\"\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n        \"ship_from\": {\r\n            \"contact_name\": \"Mister Jones\",\r\n            \"email\": \"postmen.test@example.com\",\r\n            \"company_name\": \"AfterShip\",\r\n            \"street1\": \"5160 Wiley Post Way\",\r\n            \"street2\": \"Building 2\",\r\n            \"city\": \"Salt Lake City\",\r\n            \"state\": \"UT\",\r\n            \"postal_code\": \"84116-2833\",\r\n            \"country\": \"USA\",\r\n            \"type\": \"business\"\r\n        },\r\n        \"ship_to\": {\r\n            \"contact_name\": \"Mister Jones\",\r\n            \"phone\": \"8777285325\",\r\n            \"email\": \"postmen.test@example.com\",\r\n            \"company_name\": \"AfterShip\",\r\n            \"street1\": \"8888 Wiley Post Way\",\r\n            \"street2\": \"Building 3\",\r\n            \"city\": \"Salt Lake City\",\r\n            \"state\": \"UT\",\r\n            \"postal_code\": \"84116-2833\", "supahsin" : "suphasin"}\r\n}
					  "}`
					//ssss , _:= strconv.Unquote(jsonS)
					var msg22 interface{}
					err = json.Unmarshal(([]byte(jsonS)), &msg22)
					fmt.Println(msg22)
					//fmt.Println(getValue)
					/* var jsonMap map[string]interface{}
					json.Unmarshal([]byte(getValue.String()), &jsonMap)
					file, _ := json.Marshal(getValue)
					maps = append(maps, string(file))
					*/
					//_ = ioutil.WriteFile("test.json", file, 0644)
					var jsonMap map[string]interface{}
					json.Unmarshal([]byte(getValue.String()), &jsonMap)
					//file, _ := json.Marshal(getValue)
					/* ff := fmt.Sprintf("%v", value)*/

				}
			}
			if value == "request" {
				//fmt.Println(value)
				if strSp[len(strSp)-1] == "raw" {

					var msg interface{}
					err := json.Unmarshal((*body), &msg)
					getValue := gjson.GetBytes((*body), str)

					i := strings.NewReader(getValue.Str)
					data, _ := gojson.Generate(i, ParseJson, "TestStruct", "gojson", []string{"json"}, false, true)

					value, _ := sjson.Set(string(*body), str, getValue.Str)
					_ = err
					_ = value
					v := gjson.ParseBytes(*body)
					_ = v
					s, _ := sjson.Set(string(*body), str, data)
					*body = []byte(s)

					//fmt.Println(reflect.ValueOf(getValue.Str))
					//fmt.Println(getValue)
					var jsonMap interface{}
					json.Unmarshal([]byte(*body), &jsonMap)
					//test, _ := sjson.SetBytes(jsonMap, str, v)
					//file, _ := json.Marshal(getValue)
					//ff := fmt.Sprintf("%v", test)
					_ = ioutil.WriteFile("../../logismate/domain/interface/test.go", ([]byte(s)), 0777)
				}
			}
		}

		// an arbitrary json string
		//jsonString := string(*body)
	}

}