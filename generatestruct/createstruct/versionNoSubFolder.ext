package createstruct

import (
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"strings"

	gojson "github.com/ChimeraCoder/gojson"
)

type User struct {
	Name string
	Age  int
}

func ParseJson(input io.Reader) (interface{}, error) {
	var result interface{}
	if err := json.NewDecoder(input).Decode(&result); err != nil {
		return nil, err
	}
	return result, nil
}

func CreateStruct(action string,jsonValue *string, name *string, method *string, subStructMap map[string]int, subStructMap1 map[string]int, folderName *string, subFolderName *string, sub2FolderName *string, isHaveFolderInSideSub2 *bool) {
	i := strings.NewReader(*jsonValue)
	editName := strings.Join(strings.Split(*name, " "), "")
	newName := strings.Title(editName)
	var data []byte
	switch action{

		case "request" : {
			if(newName[0:5]=="Update"){
				data, _ = gojson.Generate(i, ParseJson, newName, "request", []string{"json", "bson", }, true, true, subStructMap, subStructMap1, "req")
			}else{
				data, _ = gojson.Generate(i, ParseJson, newName, "request", []string{"json", "bson"}, true, true, subStructMap, subStructMap1, "req")
			}
			/* fmt.Println(subStructMap) */
		}
		case "response" : {
			data, _ = gojson.Generate(i, ParseJson, newName, "response", []string{"json", "bson"}, true, true, subStructMap, subStructMap1, "res")
		}

	}
	if(data==nil || string(data)==""){
		//fmt.Println("skip struct", newName)
	}else{
		switch action{

			case "request" : {
				fileName := ""
				//creaetfileName := fmt.Sprintf("logismate/domain/request/%v", *folderName)
				creaetfileName := fmt.Sprintf("logismate/domain/request")
				os.Mkdir(creaetfileName, 0777)

				//creaetfileName1 := fmt.Sprintf("%v/%v",creaetfileName, *subFolderName)
				//os.Mkdir(creaetfileName1, 0777)
				
				if(*isHaveFolderInSideSub2){
					//creaetfileName2 := fmt.Sprintf("%v/%v", creaetfileName1, *sub2FolderName)
					creaetfileName2 := fmt.Sprintf("%v", *sub2FolderName)
					os.Mkdir(creaetfileName2, 0777)
					//fileName = fmt.Sprintf("%v/%v.go", creaetfileName2, newName)
					fileName = fmt.Sprintf("%v/%v.go", creaetfileName2, newName)
					fmt.Println()
					err := ioutil.WriteFile(fileName, (data), 0777)
					if (err != nil){
						fmt.Println(err)
					}

				}else{
					//fileName = fmt.Sprintf("logismate/domain/request/%v/%v/%v.go", *folderName, *subFolderName, newName)
					//fileName = fmt.Sprintf("logismate/domain/request/%v/%v/%v.go", /* *folderName, *subFolderName */, newName)
					fileName = fmt.Sprintf("logismate/domain/request/%v.go", /* *folderName, *subFolderName */ newName)
					err := ioutil.WriteFile(fileName, (data), 0777)
					if (err != nil){
						fmt.Println(err)
					}
				}

			}
				

			case "response" : {
				fileName := ""
				creaetfileName := fmt.Sprintf("logismate/domain/response")
				//creaetfileName := fmt.Sprintf("logismate/domain/response/%v", *folderName)
				os.Mkdir(creaetfileName, 0777)

				/* creaetfileName1 := fmt.Sprintf("%v/%v",creaetfileName, *subFolderName)
				os.Mkdir(creaetfileName1, 0777) */
				
				if(*isHaveFolderInSideSub2){
					/* creaetfileName2 := fmt.Sprintf("%v/%v", creaetfileName1, *sub2FolderName)
					os.Mkdir(creaetfileName2, 0777) */
					//fileName = fmt.Sprintf("%v/%v.go", creaetfileName2, newName)
					fileName = fmt.Sprintf("%v.go", newName)
					fmt.Println()
					err := ioutil.WriteFile(fileName, (data), 0777)
					if (err != nil){
						fmt.Println(err)
					}
				}else{
					//fileName = fmt.Sprintf("logismate/domain/response/%v/%v/%v.go", *folderName, *subFolderName, newName)
					fileName = fmt.Sprintf("logismate/domain/response/%v.go", newName)
					err := ioutil.WriteFile(fileName, (data), 0777)
					if (err != nil){
						fmt.Println(err)
					}
				}

				/* _, r := os.ReadFile(fileName)
				if r == nil {
					fileName = fmt.Sprintf("logismate/domain/response/%vducplicate.go", newName)
					fmt.Println("Virus")
				} */
				}
			}
	}
	
}